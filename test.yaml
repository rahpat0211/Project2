openapi: 3.0.0
info:
  title: My Awesome API
  description: A sample API for managing products and users.
  version: 1.0.0
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://dev.example.com/v1
    description: Development server

tags:
  - name: Products
    description: Operations related to products
  - name: Users
    description: Operations related to user accounts

paths:
  /products:
    get:
      summary: Get a list of all products
      operationId: getAllProducts
      tags:
        - Products
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Offset for pagination
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new product
      operationId: createProduct
      tags:
        - Products
      requestBody:
        description: Product object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{productId}:
    get:
      summary: Get product by ID
      operationId: getProductById
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing product
      operationId: updateProduct
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          description: ID of the product to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Product object with updated fields
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product
      operationId: deleteProduct
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          description: ID of the product to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted successfully (No Content)
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - Users
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - ApiKeyAuth: [] # This operation requires API Key authentication

components:
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the product
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        name:
          type: string
          description: Name of the product
          example: "Laptop Pro"
        description:
          type: string
          description: Detailed description of the product
          example: "High-performance laptop with 16GB RAM and 512GB SSD."
        price:
          type: number
          format: float
          description: Price of the product
          example: 1299.99
        currency:
          type: string
          description: Currency of the price
          example: "USD"
          default: "USD"
        stock:
          type: integer
          description: Number of items in stock
          example: 50
    ProductInput: # Schema for creating/updating products (without generated ID)
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          description: Name of the product
          example: "Laptop Pro"
        description:
          type: string
          description: Detailed description of the product
          example: "High-performance laptop with 16GB RAM and 512GB SSD."
        price:
          type: number
          format: float
          description: Price of the product
          example: 1299.99
        currency:
          type: string
          description: Currency of the price
          example: "USD"
          default: "USD"
        stock:
          type: integer
          description: Number of items in stock
          example: 50
    User:
      type: object
      required:
        - id
        - username
        - email
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
          example: "f1e2d3c4-b5a6-9876-5432-10fedcba9876"
        username:
          type: string
          description: User's chosen username
          example: "johndoe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
          example: "2023-10-27T10:00:00Z"
    UserInput: # Schema for user registration (without generated ID or createdAt)
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: User's chosen username
          example: "johndoe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          description: User's password (should be securely handled)
          minLength: 8
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
          example: 400
        message:
          type: string
          description: A human-readable error message
          example: "Invalid input provided"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key # The name of the header parameter
